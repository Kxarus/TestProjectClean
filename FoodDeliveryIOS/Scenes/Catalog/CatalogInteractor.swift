//
//  CatalogInteractor.swift
//  TestProject
//
//  Created by Roman Kiruxin on 19.10.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CatalogBusinessLogic {
    func make(request: Catalog.Model.Request.RequestType)
}

protocol CatalogDataStore: AnyObject {
    //var name: String { get set }
}

final class CatalogInteractor {
    
    var presenter: CatalogPresentationLogic?
    var worker: CatalogWorker?
    //var name: String = ""
    
    // MARK: - Internal vars
    private let service: Services
    
    init(service: NetworkServiceable) {
        self.service = Services(service: service)
    }
}

// MARK: - Business logic
extension CatalogInteractor: CatalogBusinessLogic {
    
    func make(request: Catalog.Model.Request.RequestType) {
        if worker == nil {
            worker = CatalogWorker()
        }
        switch request {
        case .fetchProducts:
            fetchProducts()
        case .fetchSales:
            fetchSales()
        }
    }
}

// MARK: - Data store
extension CatalogInteractor: CatalogDataStore {
    
}

// MARK: - Private methods
private extension CatalogInteractor {
    
    func fetchProducts() {
        let catalogRequest = CatalogRequest()
        service.performCatalog(catalogRequest) { [weak self] result in
            switch result {
            case .success(let response):
                print(response)
//                self?.worker?.writeToRealmProducts(response.data)
                self?.presenter?.presentData(response: .products(response))
            case .failure(let error):
                print("---\(String(describing: type(of: self))): Error in \(#function) - \(error.code) \(error.message)")
//                let response = Array(self!.realm.read(ProductRM.self))
//                self?.presenter?.presentData(response: .productsRM(response))
            }
        }
    }
    
    func fetchSales() {
        let salesRequest = SalesRequest()
        service.performSales(salesRequest) { [weak self] result in
            switch result {
            case .success(let response):
                print(response)
//                self?.worker?.writeToRealmSales(response.data)
                self?.presenter?.presentData(response: .sales(response))
            case .failure(let error):
                print("---\(String(describing: type(of: self))): Error in \(#function) - \(error.code) \(error.message)")
//                let response = Array(self!.realm.read(SalesRM.self))
//                self?.presenter?.presentData(response: .salesRM(response))
            }
        }
    }
}
