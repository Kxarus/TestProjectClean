//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 7 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `categoryBackgroundActive`.
    static let categoryBackgroundActive = Rswift.ColorResource(bundle: R.hostingBundle, name: "categoryBackgroundActive")
    /// Color `mainBackground`.
    static let mainBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "mainBackground")
    /// Color `tabBarBackground`.
    static let tabBarBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "tabBarBackground")
    /// Color `tabBarTintColor`.
    static let tabBarTintColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "tabBarTintColor")
    /// Color `textCategoryActive`.
    static let textCategoryActive = Rswift.ColorResource(bundle: R.hostingBundle, name: "textCategoryActive")
    /// Color `textCategoryUnactive`.
    static let textCategoryUnactive = Rswift.ColorResource(bundle: R.hostingBundle, name: "textCategoryUnactive")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "categoryBackgroundActive", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func categoryBackgroundActive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.categoryBackgroundActive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "mainBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func mainBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.mainBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "tabBarBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func tabBarBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.tabBarBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "tabBarTintColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func tabBarTintColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.tabBarTintColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "textCategoryActive", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textCategoryActive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textCategoryActive, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "textCategoryUnactive", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textCategoryUnactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textCategoryUnactive, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "categoryBackgroundActive", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func categoryBackgroundActive(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.categoryBackgroundActive.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "mainBackground", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func mainBackground(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.mainBackground.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "tabBarBackground", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func tabBarBackground(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.tabBarBackground.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "tabBarTintColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func tabBarTintColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.tabBarTintColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "textCategoryActive", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func textCategoryActive(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.textCategoryActive.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "textCategoryUnactive", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func textCategoryUnactive(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.textCategoryUnactive.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 8 files.
  struct file {
    /// Resource file `sfuidisplayblack.otf`.
    static let sfuidisplayblackOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "sfuidisplayblack", pathExtension: "otf")
    /// Resource file `sfuidisplaybold.otf`.
    static let sfuidisplayboldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "sfuidisplaybold", pathExtension: "otf")
    /// Resource file `sfuidisplayheavy.otf`.
    static let sfuidisplayheavyOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "sfuidisplayheavy", pathExtension: "otf")
    /// Resource file `sfuidisplaylight.otf`.
    static let sfuidisplaylightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "sfuidisplaylight", pathExtension: "otf")
    /// Resource file `sfuidisplaymedium.otf`.
    static let sfuidisplaymediumOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "sfuidisplaymedium", pathExtension: "otf")
    /// Resource file `sfuidisplaysemibold.otf`.
    static let sfuidisplaysemiboldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "sfuidisplaysemibold", pathExtension: "otf")
    /// Resource file `sfuidisplaythin.otf`.
    static let sfuidisplaythinOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "sfuidisplaythin", pathExtension: "otf")
    /// Resource file `sfuidisplayultralight.otf`.
    static let sfuidisplayultralightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "sfuidisplayultralight", pathExtension: "otf")

    /// `bundle.url(forResource: "sfuidisplayblack", withExtension: "otf")`
    static func sfuidisplayblackOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfuidisplayblackOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sfuidisplaybold", withExtension: "otf")`
    static func sfuidisplayboldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfuidisplayboldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sfuidisplayheavy", withExtension: "otf")`
    static func sfuidisplayheavyOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfuidisplayheavyOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sfuidisplaylight", withExtension: "otf")`
    static func sfuidisplaylightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfuidisplaylightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sfuidisplaymedium", withExtension: "otf")`
    static func sfuidisplaymediumOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfuidisplaymediumOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sfuidisplaysemibold", withExtension: "otf")`
    static func sfuidisplaysemiboldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfuidisplaysemiboldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sfuidisplaythin", withExtension: "otf")`
    static func sfuidisplaythinOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfuidisplaythinOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "sfuidisplayultralight", withExtension: "otf")`
    static func sfuidisplayultralightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfuidisplayultralightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 8 fonts.
  struct font: Rswift.Validatable {
    /// Font `SFUIDisplay-Black`.
    static let sfuiDisplayBlack = Rswift.FontResource(fontName: "SFUIDisplay-Black")
    /// Font `SFUIDisplay-Bold`.
    static let sfuiDisplayBold = Rswift.FontResource(fontName: "SFUIDisplay-Bold")
    /// Font `SFUIDisplay-Heavy`.
    static let sfuiDisplayHeavy = Rswift.FontResource(fontName: "SFUIDisplay-Heavy")
    /// Font `SFUIDisplay-Light`.
    static let sfuiDisplayLight = Rswift.FontResource(fontName: "SFUIDisplay-Light")
    /// Font `SFUIDisplay-Medium`.
    static let sfuiDisplayMedium = Rswift.FontResource(fontName: "SFUIDisplay-Medium")
    /// Font `SFUIDisplay-Semibold`.
    static let sfuiDisplaySemibold = Rswift.FontResource(fontName: "SFUIDisplay-Semibold")
    /// Font `SFUIDisplay-Thin`.
    static let sfuiDisplayThin = Rswift.FontResource(fontName: "SFUIDisplay-Thin")
    /// Font `SFUIDisplay-Ultralight`.
    static let sfuiDisplayUltralight = Rswift.FontResource(fontName: "SFUIDisplay-Ultralight")

    /// `UIFont(name: "SFUIDisplay-Black", size: ...)`
    static func sfuiDisplayBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiDisplayBlack, size: size)
    }

    /// `UIFont(name: "SFUIDisplay-Bold", size: ...)`
    static func sfuiDisplayBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiDisplayBold, size: size)
    }

    /// `UIFont(name: "SFUIDisplay-Heavy", size: ...)`
    static func sfuiDisplayHeavy(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiDisplayHeavy, size: size)
    }

    /// `UIFont(name: "SFUIDisplay-Light", size: ...)`
    static func sfuiDisplayLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiDisplayLight, size: size)
    }

    /// `UIFont(name: "SFUIDisplay-Medium", size: ...)`
    static func sfuiDisplayMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiDisplayMedium, size: size)
    }

    /// `UIFont(name: "SFUIDisplay-Semibold", size: ...)`
    static func sfuiDisplaySemibold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiDisplaySemibold, size: size)
    }

    /// `UIFont(name: "SFUIDisplay-Thin", size: ...)`
    static func sfuiDisplayThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiDisplayThin, size: size)
    }

    /// `UIFont(name: "SFUIDisplay-Ultralight", size: ...)`
    static func sfuiDisplayUltralight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfuiDisplayUltralight, size: size)
    }

    static func validate() throws {
      if R.font.sfuiDisplayBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Black' could not be loaded, is 'sfuidisplayblack.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiDisplayBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Bold' could not be loaded, is 'sfuidisplaybold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiDisplayHeavy(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Heavy' could not be loaded, is 'sfuidisplayheavy.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiDisplayLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Light' could not be loaded, is 'sfuidisplaylight.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiDisplayMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Medium' could not be loaded, is 'sfuidisplaymedium.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiDisplaySemibold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Semibold' could not be loaded, is 'sfuidisplaysemibold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiDisplayThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Thin' could not be loaded, is 'sfuidisplaythin.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sfuiDisplayUltralight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFUIDisplay-Ultralight' could not be loaded, is 'sfuidisplayultralight.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 5 images.
  struct image {
    /// Image `cityButtonIcon`.
    static let cityButtonIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "cityButtonIcon")
    /// Image `tabCart`.
    static let tabCart = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabCart")
    /// Image `tabContacts`.
    static let tabContacts = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabContacts")
    /// Image `tabMenu`.
    static let tabMenu = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabMenu")
    /// Image `tabProfile`.
    static let tabProfile = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabProfile")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cityButtonIcon", bundle: ..., traitCollection: ...)`
    static func cityButtonIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cityButtonIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabCart", bundle: ..., traitCollection: ...)`
    static func tabCart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabCart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabContacts", bundle: ..., traitCollection: ...)`
    static func tabContacts(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabContacts, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabMenu", bundle: ..., traitCollection: ...)`
    static func tabMenu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabMenu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabProfile", bundle: ..., traitCollection: ...)`
    static func tabProfile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabProfile, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 7 nibs.
  struct nib {
    /// Nib `CategoryCell`.
    static let categoryCell = _R.nib._CategoryCell()
    /// Nib `CategorySectionCell`.
    static let categorySectionCell = _R.nib._CategorySectionCell()
    /// Nib `CitySectionCell`.
    static let citySectionCell = _R.nib._CitySectionCell()
    /// Nib `EmptyHeaderCollectionReusableView`.
    static let emptyHeaderCollectionReusableView = _R.nib._EmptyHeaderCollectionReusableView()
    /// Nib `ProductItemCollectionViewCell`.
    static let productItemCollectionViewCell = _R.nib._ProductItemCollectionViewCell()
    /// Nib `SaleCell`.
    static let saleCell = _R.nib._SaleCell()
    /// Nib `SalesSectionCell`.
    static let salesSectionCell = _R.nib._SalesSectionCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CategoryCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.categoryCell) instead")
    static func categoryCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.categoryCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CategorySectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.categorySectionCell) instead")
    static func categorySectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.categorySectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CitySectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.citySectionCell) instead")
    static func citySectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.citySectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EmptyHeaderCollectionReusableView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.emptyHeaderCollectionReusableView) instead")
    static func emptyHeaderCollectionReusableView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.emptyHeaderCollectionReusableView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProductItemCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.productItemCollectionViewCell) instead")
    static func productItemCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.productItemCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SaleCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.saleCell) instead")
    static func saleCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.saleCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SalesSectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.salesSectionCell) instead")
    static func salesSectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.salesSectionCell)
    }
    #endif

    static func categoryCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CategoryCell? {
      return R.nib.categoryCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CategoryCell
    }

    static func categorySectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CategorySectionCell? {
      return R.nib.categorySectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CategorySectionCell
    }

    static func citySectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CitySectionCell? {
      return R.nib.citySectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CitySectionCell
    }

    static func emptyHeaderCollectionReusableView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EmptyHeaderCollectionReusableView? {
      return R.nib.emptyHeaderCollectionReusableView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EmptyHeaderCollectionReusableView
    }

    static func productItemCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProductItemCollectionViewCell? {
      return R.nib.productItemCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProductItemCollectionViewCell
    }

    static func saleCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SaleCell? {
      return R.nib.saleCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SaleCell
    }

    static func salesSectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SalesSectionCell? {
      return R.nib.salesSectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SalesSectionCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 6 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `CategoryCell`.
    static let categoryCell: Rswift.ReuseIdentifier<CategoryCell> = Rswift.ReuseIdentifier(identifier: "CategoryCell")
    /// Reuse identifier `CategorySectionCell`.
    static let categorySectionCell: Rswift.ReuseIdentifier<CategorySectionCell> = Rswift.ReuseIdentifier(identifier: "CategorySectionCell")
    /// Reuse identifier `CitySectionCell`.
    static let citySectionCell: Rswift.ReuseIdentifier<CitySectionCell> = Rswift.ReuseIdentifier(identifier: "CitySectionCell")
    /// Reuse identifier `ProductItemCollectionViewCell`.
    static let productItemCollectionViewCell: Rswift.ReuseIdentifier<ProductItemCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "ProductItemCollectionViewCell")
    /// Reuse identifier `SaleCell`.
    static let saleCell: Rswift.ReuseIdentifier<SaleCell> = Rswift.ReuseIdentifier(identifier: "SaleCell")
    /// Reuse identifier `SalesSectionCell`.
    static let salesSectionCell: Rswift.ReuseIdentifier<SalesSectionCell> = Rswift.ReuseIdentifier(identifier: "SalesSectionCell")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _CitySectionCell.validate()
      try _SaleCell.validate()
    }

    struct _CategoryCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = CategoryCell

      let bundle = R.hostingBundle
      let identifier = "CategoryCell"
      let name = "CategoryCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CategoryCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CategoryCell
      }

      fileprivate init() {}
    }

    struct _CategorySectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = CategorySectionCell

      let bundle = R.hostingBundle
      let identifier = "CategorySectionCell"
      let name = "CategorySectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CategorySectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CategorySectionCell
      }

      fileprivate init() {}
    }

    struct _CitySectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = CitySectionCell

      let bundle = R.hostingBundle
      let identifier = "CitySectionCell"
      let name = "CitySectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CitySectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CitySectionCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "cityButtonIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cityButtonIcon' is used in nib 'CitySectionCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _EmptyHeaderCollectionReusableView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "EmptyHeaderCollectionReusableView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EmptyHeaderCollectionReusableView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EmptyHeaderCollectionReusableView
      }

      fileprivate init() {}
    }

    struct _ProductItemCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ProductItemCollectionViewCell

      let bundle = R.hostingBundle
      let identifier = "ProductItemCollectionViewCell"
      let name = "ProductItemCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ProductItemCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProductItemCollectionViewCell
      }

      fileprivate init() {}
    }

    struct _SaleCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SaleCell

      let bundle = R.hostingBundle
      let identifier = "SaleCell"
      let name = "SaleCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SaleCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SaleCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "logoImage", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logoImage' is used in nib 'SaleCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "gray", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'gray' is used in nib 'SaleCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _SalesSectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SalesSectionCell

      let bundle = R.hostingBundle
      let identifier = "SalesSectionCell"
      let name = "SalesSectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SalesSectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SalesSectionCell
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
